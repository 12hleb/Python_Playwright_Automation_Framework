name: 🔍 PR Quality Checks

on:
  pull_request:
    branches: [ main ]
    types: [opened, synchronize, reopened]

env:
  PYTHONPATH: ${{ github.workspace }}

jobs:
  lint-and-format:
    name: 🧹 Code Quality
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
      - name: 📂 Checkout repository
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install black flake8 isort

      - name: 🎨 Check code formatting (Black)
        run: |
          black --check --diff .

      - name: 📏 Check import sorting (isort)
        run: |
          isort --check-only --diff .

      - name: 🔍 Lint with flake8
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

  quick-tests:
    name: ⚡ Quick Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: 📂 Checkout repository
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: 🎭 Install Playwright browsers
        run: playwright install --with-deps chromium

      - name: 🔧 Create environment file
        run: |
          cat > .env << EOF
          BASE_URL=https://www.saucedemo.com/v1/
          API_BASE_URL=https://jsonplaceholder.typicode.com
          BROWSER=chromium
          HEADLESS=true
          SLOW_MO=0
          TIMEOUT=15000
          EOF

      - name: 🧪 Run API Tests
        run: |
          python -m pytest tests/api/ -v --tb=short

      - name: 💨 Run Smoke Tests
        run: |
          python -m pytest -m smoke -v --tb=short

      - name: 🛡️ Run Critical Security Tests
        run: |
          python -m pytest tests/ui/test_saucedemo_security.py::TestSauceDemoSecurity::test_sql_injection_basic_or -v --tb=short

  dependency-check:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
      - name: 📂 Checkout repository
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: 🔒 Run security audit
        run: |
          pip install safety
          safety check --json || true

  pr-summary:
    name: 📋 PR Summary
    runs-on: ubuntu-latest
    needs: [lint-and-format, quick-tests, dependency-check]
    if: always()
    
    steps:
      - name: 📊 Create PR Summary
        run: |
          echo "## 🔍 PR Quality Check Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status | Details |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|---------|" >> $GITHUB_STEP_SUMMARY
          echo "| 🧹 Code Quality | ${{ needs.lint-and-format.result }} | Black, isort, flake8 |" >> $GITHUB_STEP_SUMMARY
          echo "| ⚡ Quick Tests | ${{ needs.quick-tests.result }} | API + Smoke tests |" >> $GITHUB_STEP_SUMMARY
          echo "| 🔒 Security Scan | ${{ needs.dependency-check.result }} | Dependency audit |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🎯 **Next Steps:**" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.lint-and-format.result }}" = "success" ] && [ "${{ needs.quick-tests.result }}" = "success" ]; then
            echo "✅ All checks passed! Ready for review." >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Some checks failed. Please fix issues before merge." >> $GITHUB_STEP_SUMMARY
          fi 